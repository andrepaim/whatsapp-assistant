name: Firebase Integration Test

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'index.js'
      - 'functions/**'
      - '.firebaserc'
      - 'firebase.json'
      - 'package.json'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Firebase Tools
      run: npm install -g firebase-tools
    
    - name: Run unit tests
      run: npm test
      
    - name: Setup Firebase emulators and test
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: |
        # Start Firebase emulators
        firebase emulators:start --only functions,storage &
        # Wait for emulators to start
        sleep 10
        
        # Create a simple test script
        cat > test-firebase.js << 'EOF'
        const admin = require('firebase-admin');
        const { FirebaseStorageAdapter } = require('./firebase-adapter');

        // Initialize Firebase with emulator settings
        process.env.FIREBASE_STORAGE_EMULATOR_HOST = "localhost:9199";
        admin.initializeApp({
          projectId: 'demo-whatsapp-joke-bot',
          storageBucket: 'demo-whatsapp-joke-bot.appspot.com'
        });

        const bucket = admin.storage().bucket();
        const adapter = new FirebaseStorageAdapter(bucket);

        async function runTest() {
          try {
            // Test basic operations
            await adapter.set('test-key', { test: 'data' });
            const data = await adapter.get('test-key');
            console.log('Retrieved data:', data);
            
            if (JSON.stringify(data) !== JSON.stringify({ test: 'data' })) {
              throw new Error('Data mismatch');
            }
            
            // Test getAll
            const allItems = await adapter.getAll();
            console.log('All items:', allItems);
            
            // Test delete
            await adapter.delete('test-key');
            const deletedData = await adapter.get('test-key');
            console.log('After delete:', deletedData);
            
            if (deletedData !== null) {
              throw new Error('Delete failed');
            }
            
            console.log('Firebase Storage adapter test passed!');
            process.exit(0);
          } catch (error) {
            console.error('Test failed:', error);
            process.exit(1);
          }
        }

        runTest();
        EOF
        
        # Extract FirebaseStorageAdapter for testing
        echo "class FirebaseStorageAdapter {
          constructor(bucket) {
            this.bucket = bucket;
          }
        
          async set(key, value) {
            const file = this.bucket.file(key);
            await file.save(JSON.stringify(value));
          }
        
          async get(key) {
            const file = this.bucket.file(key);
            try {
              const [data] = await file.download();
              return JSON.parse(data.toString());
            } catch (error) {
              if (error.code === 404) return null; // File not found
              throw error;
            }
          }
        
          async delete(key) {
            const file = this.bucket.file(key);
            await file.delete({ ignoreNotFound: true });
          }
        
          async getAll() {
            const [files] = await this.bucket.getFiles();
            const sessions = [];
            for (const file of files) {
              const key = file.name;
              const [data] = await file.download();
              sessions.push({ key, data: JSON.parse(data.toString()) });
            }
            return sessions;
          }
          
          // Required for RemoteAuth
          async sessionExists(options) {
            const { session } = options;
            try {
              const file = this.bucket.file(session);
              const [exists] = await file.exists();
              return exists;
            } catch (error) {
              console.error('Error checking if session exists:', error);
              return false;
            }
          }
        }
        
        module.exports = { FirebaseStorageAdapter };" > firebase-adapter.js
        
        # Run the test
        node test-firebase.js
        TEST_RESULT=$?
        
        # Kill Firebase emulators
        kill $(jobs -p)
        
        # Return test result
        exit $TEST_RESULT

  deploy-test:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd functions
        npm ci
    
    - name: Deploy to test environment
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: |
        # Use a test project for deployment
        echo '{
          "projects": {
            "default": "whatsapp-joke-bot-test"
          }
        }' > .firebaserc
        
        # Deploy to Firebase
        npx firebase deploy --only functions,storage --project whatsapp-joke-bot-test
        
        # Make a request to the function and check response
        FUNCTION_URL=$(firebase functions:list --project whatsapp-joke-bot-test --format=json | jq -r '.[0].httpsTrigger.url')
        RESPONSE=$(curl -s $FUNCTION_URL)
        
        # Check response
        if [[ "$RESPONSE" == *"running"* ]]; then
          echo "Function deployed successfully: $RESPONSE"
          exit 0
        else
          echo "Function deployment test failed: $RESPONSE"
          exit 1
        fi